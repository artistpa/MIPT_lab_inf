class subvector{
public:
    int *mas;
    unsigned int top;
    unsigned int capacity;
    subvector(); // инициализация пустого недовектора (top и capacity по нулям, а mas это NULL)
    bool push_back(int d); // добавление элемента в конец недовектора с выделением дополнительной памяти при необходимости
    int pop_back(); // удаление элемента с конца недовектора, значение удаленного элемента вернуть (если недовектор пустой, вернуть ноль)
    bool resize(unsigned int new_capacity); // увеличить емкость недовектора (можно использовать и для уменьшения - тогда, в рамках данной реализации, если top меньше новой capacity, то копируем только то, что влезает, и уменьшаем top до capacity)
    void shrink_to_fit(); // очистить неиспользуемую память, переехав на новое место с уменьшением capacity до top
    void clear(); // очистить содержимое недовектора, занимаемое место при этом не меняется
    ~subvector();	// очистить всю используемую память, инициализировать недовектор как пустой
    void insert(int value, int pos); // добавление элемента в произвольное место вектора
};


